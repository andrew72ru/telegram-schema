<?php

declare(strict_types=1);

namespace App\Telegram\Types;

use Symfony\Component\Serializer\Annotation\SerializedName;

/**
 * A dice message. The dice value is randomly generated by the server.
 */
class MessageDice extends MessageContent implements \JsonSerializable
{
    public function __construct(
        /** The animated stickers with the initial dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known */
        #[SerializedName('initial_state')]
        private DiceStickers|null $initialState = null,
        /** The animated stickers with the final dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known */
        #[SerializedName('final_state')]
        private DiceStickers|null $finalState = null,
        /** Emoji on which the dice throw animation is based */
        #[SerializedName('emoji')]
        private string $emoji,
        /** The dice value. If the value is 0, the dice don't have final state yet */
        #[SerializedName('value')]
        private int $value,
        /** Number of frame after which a success animation like a shower of confetti needs to be shown on updateMessageSendSucceeded */
        #[SerializedName('success_animation_frame_number')]
        private int $successAnimationFrameNumber,
    ) {
    }

    /**
     * Get The animated stickers with the initial dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known.
     */
    public function getInitialState(): DiceStickers|null
    {
        return $this->initialState;
    }

    /**
     * Set The animated stickers with the initial dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known.
     */
    public function setInitialState(DiceStickers|null $initialState): self
    {
        $this->initialState = $initialState;

        return $this;
    }

    /**
     * Get The animated stickers with the final dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known.
     */
    public function getFinalState(): DiceStickers|null
    {
        return $this->finalState;
    }

    /**
     * Set The animated stickers with the final dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known.
     */
    public function setFinalState(DiceStickers|null $finalState): self
    {
        $this->finalState = $finalState;

        return $this;
    }

    /**
     * Get Emoji on which the dice throw animation is based.
     */
    public function getEmoji(): string
    {
        return $this->emoji;
    }

    /**
     * Set Emoji on which the dice throw animation is based.
     */
    public function setEmoji(string $emoji): self
    {
        $this->emoji = $emoji;

        return $this;
    }

    /**
     * Get The dice value. If the value is 0, the dice don't have final state yet.
     */
    public function getValue(): int
    {
        return $this->value;
    }

    /**
     * Set The dice value. If the value is 0, the dice don't have final state yet.
     */
    public function setValue(int $value): self
    {
        $this->value = $value;

        return $this;
    }

    /**
     * Get Number of frame after which a success animation like a shower of confetti needs to be shown on updateMessageSendSucceeded.
     */
    public function getSuccessAnimationFrameNumber(): int
    {
        return $this->successAnimationFrameNumber;
    }

    /**
     * Set Number of frame after which a success animation like a shower of confetti needs to be shown on updateMessageSendSucceeded.
     */
    public function setSuccessAnimationFrameNumber(int $successAnimationFrameNumber): self
    {
        $this->successAnimationFrameNumber = $successAnimationFrameNumber;

        return $this;
    }

    public function jsonSerialize(): array
    {
        return [
            '@type' => 'messageDice',
            'initial_state' => $this->getInitialState(),
            'final_state' => $this->getFinalState(),
            'emoji' => $this->getEmoji(),
            'value' => $this->getValue(),
            'success_animation_frame_number' => $this->getSuccessAnimationFrameNumber(),
        ];
    }
}
