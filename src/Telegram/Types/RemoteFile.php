<?php

declare(strict_types=1);

namespace App\Telegram\Types;

use Symfony\Component\Serializer\Annotation\SerializedName;

/**
 * Represents a remote file.
 */
class RemoteFile implements \JsonSerializable
{
    public function __construct(
        /** Remote file identifier; may be empty. Can be used by the current user across application restarts or even from other devices. Uniquely identifies a file, but a file can have a lot of different valid identifiers. */
        #[SerializedName('id')]
        private string $id,
        /** Unique file identifier; may be empty if unknown. The unique file identifier which is the same for the same file even for different users and is persistent over time */
        #[SerializedName('unique_id')]
        private string $uniqueId,
        /** True, if the file is currently being uploaded (or a remote copy is being generated by some other means) */
        #[SerializedName('is_uploading_active')]
        private bool $isUploadingActive,
        /** True, if a remote copy is fully available */
        #[SerializedName('is_uploading_completed')]
        private bool $isUploadingCompleted,
        /** Size of the remote available part of the file, in bytes; 0 if unknown */
        #[SerializedName('uploaded_size')]
        private int $uploadedSize,
    ) {
    }

    /**
     * Get Remote file identifier; may be empty. Can be used by the current user across application restarts or even from other devices. Uniquely identifies a file, but a file can have a lot of different valid identifiers..
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Set Remote file identifier; may be empty. Can be used by the current user across application restarts or even from other devices. Uniquely identifies a file, but a file can have a lot of different valid identifiers..
     */
    public function setId(string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get Unique file identifier; may be empty if unknown. The unique file identifier which is the same for the same file even for different users and is persistent over time.
     */
    public function getUniqueId(): string
    {
        return $this->uniqueId;
    }

    /**
     * Set Unique file identifier; may be empty if unknown. The unique file identifier which is the same for the same file even for different users and is persistent over time.
     */
    public function setUniqueId(string $uniqueId): self
    {
        $this->uniqueId = $uniqueId;

        return $this;
    }

    /**
     * Get True, if the file is currently being uploaded (or a remote copy is being generated by some other means).
     */
    public function getIsUploadingActive(): bool
    {
        return $this->isUploadingActive;
    }

    /**
     * Set True, if the file is currently being uploaded (or a remote copy is being generated by some other means).
     */
    public function setIsUploadingActive(bool $isUploadingActive): self
    {
        $this->isUploadingActive = $isUploadingActive;

        return $this;
    }

    /**
     * Get True, if a remote copy is fully available.
     */
    public function getIsUploadingCompleted(): bool
    {
        return $this->isUploadingCompleted;
    }

    /**
     * Set True, if a remote copy is fully available.
     */
    public function setIsUploadingCompleted(bool $isUploadingCompleted): self
    {
        $this->isUploadingCompleted = $isUploadingCompleted;

        return $this;
    }

    /**
     * Get Size of the remote available part of the file, in bytes; 0 if unknown.
     */
    public function getUploadedSize(): int
    {
        return $this->uploadedSize;
    }

    /**
     * Set Size of the remote available part of the file, in bytes; 0 if unknown.
     */
    public function setUploadedSize(int $uploadedSize): self
    {
        $this->uploadedSize = $uploadedSize;

        return $this;
    }

    public function jsonSerialize(): array
    {
        return [
            '@type' => 'remoteFile',
            'id' => $this->getId(),
            'unique_id' => $this->getUniqueId(),
            'is_uploading_active' => $this->getIsUploadingActive(),
            'is_uploading_completed' => $this->getIsUploadingCompleted(),
            'uploaded_size' => $this->getUploadedSize(),
        ];
    }
}
